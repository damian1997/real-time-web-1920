<% if(spotify_token) { %>
  <script>
    window.onSpotifyWebPlaybackSDKReady = () => {
      // Fetch api token that has been set
      const token = '<%= spotify_token %>'
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token) },
      })

      // Error handling
      player.addListener('initialization_error', ({ message }) => { console.error(message) })
      player.addListener('authentication_error', ({ message }) => { console.error(message) })
      player.addListener('account_error', ({ message }) => { console.error(message) })
      player.addListener('playback_error', ({ message }) => { console.error(message) })


      // Playback status updates
      player.addListener('player_state_changed', state => {
        player.getCurrentState().then(state => {
          if (!state) {
            console.error('User is not playing music through the Web Playback SDK')
            return
          }

          let {
            current_track,
            next_tracks: [next_track]
          } = state.track_window

          if(current_track) {
            document.querySelector('.current_track').innerHTML = `<p>${current_track.name}</p>`

            const currently_added_container = document.querySelector('.que--just-added')
            const to_be_removed = Array.from(currently_added_container.childNodes.values()).find(node => {
              if(node instanceof HTMLElement) {
                return node.dataset.trackid === current_track.id
              }
            })

            if(to_be_removed) {
              socket.emit('remove-from-queue', {room: '<%= room_id %>', track: to_be_removed.dataset.trackid})
              document.querySelector('.que--just-added').removeChild(to_be_removed)
            }

            socket.emit('new-current-track', {room: '<%= room_id %>', track: {id: current_track.id, name: current_track.name}})
          }
        })
      })

      player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id, ' And token <%= spotify_token %>')

        const promised_playlist = getPlaylist()
        Promise.resolve(promised_playlist)
          .then(playlist => {
            constructPlaylist(playlist)
            addEventHandlers(device_id)
            console.log('<%= to_be_played.id %>')
            if('<%= to_be_played.id %>' !== '') {
              playTrack('<%= to_be_played.id %>',device_id)
            } else {
              playFirstTrack(playlist,device_id)
            }
          })
      })

      // Not Ready
      player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id)
      })


      // Connect to the player!
      player.connect()
    }

    function getPlaylist() {
      const playlist = fetch(`https://api.spotify.com/v1/playlists/<%= playlist %>`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer <%= spotify_token %>`
        },
      }).then(response => {
        return response.json()
      })

      return playlist
    }

    function playFirstTrack(device_id) {
      fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
        method: 'PUT',
        body: JSON.stringify({ uris: ['spotify:track:2Tg6Lh9nlPbH8Qby1uHPeC'] }),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= spotify_token %>`
        },
      })
    }

    function constructPlaylist(playlist) {
      const playlist_container = document.querySelector('.playlist--tracks')
      playlist.tracks.items.forEach(track => {
        const list_item = `<li class="playlist--tracks--track" data-trackid="${track.track.id}">${track.track.name}</li>`
        playlist_container.insertAdjacentHTML('beforeend',list_item)
      })
    }

    function addTrackToQue(track_name,trackid,device_id) {
      fetch(`https://api.spotify.com/v1/me/player/queue?uri=spotify%3Atrack%3a${trackid.toString()}&device_id=${device_id}`, {
        headers: {
          Accept: "application/json",
          Authorization: `Bearer <%= spotify_token %>`,
          "Content-Type": "application/json"
        },
        method: "POST"
      }).then(response => {
        // Message track been added to que m9
        socket.emit('track-added-to-que', {track: {name: track_name, id: trackid}, room: `<%= room_id %>`})
      }).catch(error => {
        console.log(error)
      })
    }

    function addEventHandlers(device_id) {
      const nodes = document.querySelectorAll('.playlist--tracks--track')
      nodes.forEach(node => {
        node.addEventListener('click', event => {
          addTrackToQue(event.target.innerHTML,event.target.dataset.trackid,device_id)
        })
      })
    }

    function playFirstTrack(playlist,device_id) {
      const random_track_index = getRandomInt(0,playlist.tracks.items.length)

      fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
        method: 'PUT',
        body: JSON.stringify({ uris: [`spotify:track:${playlist.tracks.items[random_track_index].track.id}`] }),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= spotify_token %>`
        },
      })
    }

    function playTrack(trackid,device_id) {
      fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
        method: 'PUT',
        body: JSON.stringify({ uris: [`spotify:track:${trackid}`] }),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= spotify_token %>`
        },
      })
    }

    function getRandomInt(min, max) {
      min = Math.ceil(min)
      max = Math.floor(max)
      return Math.floor(Math.random() * (max - min + 1)) + min
    }

    function getCurrentTrack() {
      return fetch(`https://api.spotify.com/v1/me/player`, {
        method: 'GET',
        headers: {
          Accept: 'application/json',
          Authorization: `Bearer <%= spotify_token %>`,
          "Content-Type": `application/json`
        }
      })
    }

    function getCurrentQue() {

    }
  </script>
<% } %>
