!function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_index_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _scripts_socket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _scripts_socket_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scripts_socket_js__WEBPACK_IMPORTED_MODULE_1__);\n// Import custom scripts here\n\n\n\n\n//# sourceURL=webpack:///./src/index.js?")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/index.scss?")},function(module,exports){eval("let socket = io()\nlet name = ''\n\nswitch(window.location.pathname) {\n  case '/tech':\n    socket = io('/tech')\n    name = prompt('What is your name?')\n    if(name) {\n      appendMessage('You have successfully joined the server')\n      socket.emit('new-user', name)\n\n      socket.on('chat-message', (data) => {\n        console.log(data)\n        appendMessage(`${data.name}: ${data.message}`, data.actor)\n      })\n\n      socket.on('user-connected', name => {\n        appendMessage(`${name} connected to the server`)\n      })\n\n      socket.on('command-output', output => {\n        appendMessage(output)\n      })\n\n\n      socket.on('redirect', url => {\n        window.location.href = url\n      })\n\n\n      formHandler(socket)\n    } else {\n      name = prompt('You need to fill in a name to be able to join this server')\n    }\n    break;\n  case '/general':\n    socket = io('/general')\n    name = prompt('What is your name?')\n    if(name) {\n      appendMessage('You have successfully joined the server')\n      socket.emit('new-user', name)\n\n      socket.on('chat-message', (data) => {\n        console.log(data)\n        appendMessage(`${data.name}: ${data.message}`, data.actor)\n      })\n\n      socket.on('user-connected', name => {\n        appendMessage(`${name} connected to the server`)\n      })\n\n      socket.on('command-output', output => {\n        appendMessage(output)\n      })\n\n      socket.on('redirect', url => {\n        window.location.href = url\n      })\n\n\n      formHandler(socket)\n    } else {\n      name = prompt('You need to fill in a name to be able to join this server')\n    }\n    break;\n  default: \n    socket = io('/')\n    socket.on('welcome-message', message => {\n      appendMessage(message)\n    })\n\n    socket.on('command-output', output => {\n      appendMessage(output)\n    })\n\n    socket.on('redirect', url => {\n      window.location.href = url\n    })\n    \n    formHandler(socket)\n    break;\n}\n\nfunction formHandler(socket) {\n  document.querySelector('form').addEventListener('submit', (event) => {\n    event.preventDefault()\n    const MESSAGEINPUT = document.getElementById('msg')\n    if(MESSAGEINPUT.value.charAt(0) === '!') {\n      socket.emit('command-ran', MESSAGEINPUT.value)\n    } else {\n      socket.emit('chat-message', MESSAGEINPUT.value)\n    }\n    MESSAGEINPUT.value = ''\n  })\n}\n\nfunction  appendMessage(message, actor = 'server') {\n  let li = document.createElement('li')  \n  li.classList.add(actor)\n  li.innerHTML = message\n  document.getElementById('messages').appendChild(li)\n}\n\n\n//# sourceURL=webpack:///./src/scripts/socket.js?")}]);